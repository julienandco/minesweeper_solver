set(hyper_res).
assign(max_proofs,-1).


% Problem Language
%
% Properties:
% - rows(x): There are x rows on the game board
% - columns(y): There are y columns on the game board
% - sensorH(x,y,z): There is a sensor in the cell (x,y) that detects z bombs in the row x
% - sensorV(x,y,z): There is a sensor in the cell (x,y) that detects z bombs in the column y
% - bomb(x,y): There is a bomb in the cell (x,y)
% - empty(x,y): The cell (x,y) is empty
%

make_evaluable(_>_, $GT(_,_)).
make_evaluable(_<_, $LT(_,_)).
make_evaluable(_<=_, $LE(_,_)).
make_evaluable(_+_, $SUM(_,_)).
make_evaluable(_-_, $DIFF(_,_)).

list(demodulators).
    % Function that returns whether a given element x is part of a given list.
    belongsTo(x,[]) = $F.
    belongsTo(x,[y|w]) = $IF($ID(x,y), $T, belongsTo(x,w)).
end_of_list.

formula_list(usable).

    %%%%%%%%%%%%%%%%%%%%%%% Construction of the lists of possible bombs %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    %% 
    %% This construction is the main part of my solution. The same logic applies to rows and columns, so everything
    %% I am about to explain for rows also applies to columns.
    %%
    %% At the end of the process, a fact possibleBombsInRow(r,[a|b],n) is asserted that tells us that in row f there are a total of n
    %% possible bombs and that there will be m <= n bombs in the cells (r,y) of row r with y \in [a|b].
    %%
    %% Because we are constructing it with the auxiliary fact possibleBombsInRowTemp the final fact (possibleBombsInRow)
    %% only gets asserted after we have traversed the entire board. Also, the construction is generous, i.e.
    %% if the solved minesweeper the bombs of row r were in the cells (r,2) and (r,4), then 2 and 4 will ALWAYS be included in
    %% EVERY LIST [a|b] of EVERY FACT possibleBombsInRow(r,[a|b],n). Or said differently: if there is
    %% a fact possibleBombsInRow(r,[a|b],n), then 2 and 4 are in [a|b].
    %%
    %% Because of this, there will result some facts possibleBombsInRow(r,[a|b],n) that are too generous (i.e. [a|b] is too big
    %% to solve the problem directly), but thanks to the additional conditions (there is a sensor, the cell has been marked empty
    %% because of another rule or there is a completed column and none of the bombs of that column is in row r), 
    %% there will also be a fact possibleBombsInRow(r,[c|d],n) asserted, in which [c|d] ONLY contains the indices of columns in which
    %% there will be a bomb and NONE other. For the previous example this would be: possibleBombsInRow(r,[2,4],2). I explain how we 
    %% determine whether a column is completed further down in this document.
    %%

    % In rows

    %% First, we construct an empty list for every existing row
    all r (rows(r) -> possibleBombsInRowInit(r,[])).
    all r (possibleBombsInRowInit(r,[]) & r>1 -> possibleBombsInRowInit(r-1,[])).

    %% Start of the naive filling -> every cell of the row could contain a bomb
    all r c (possibleBombsInRowInit(r,[]) & columns(c) -> possibleBombsInRowTemp(r,c-1,[c],1)).

    %% Start of the smart filling (gets activated when the cell contains a sensor, is empty or is
    %% part of a completed column and does not contain a bomb of that column -> there cannot be a bomb in this row
    %% without breaking the rules).
    all r c z x y (possibleBombsInRowInit(r,[]) & columns(c) & (sensorV(r,c,z) | sensorH(r,c,z) | empty(r,c) | (columnCompleted(c,[x|y]) & -belongsTo(r,[x|y]))) -> possibleBombsInRowTemp(r,c-1,[],0)).

    %% Naive filling step for the empty lists (in every previous step the smart filling forbid the addition of an index)
    all r c (possibleBombsInRowTemp(r,c,[],0) & c>0 -> possibleBombsInRowTemp(r,c-1,[c],1)).

    %% Smart filling step for the empty lists
    all r c z x y (possibleBombsInRowTemp(r,c,[],0) & c>0 & (sensorV(r,c,z) | sensorH(r,c,z) | empty(r,c) | (columnCompleted(c,[x|y]) & -belongsTo(r,[x|y]))) -> possibleBombsInRowTemp(r,c-1,[],0)).

    %% Naive filling step for the non-empty lists
    all r c a b n (possibleBombsInRowTemp(r,c,[a|b],n) & c>0 -> possibleBombsInRowTemp(r,c-1,[c,a|b],n+1)).

    %% Smart filling step for non-empty lists
    all r a b c n z x y (possibleBombsInRowTemp(r,c,[a|b],n) & c>0 & (sensorV(r,c,z) | sensorH(r,c,z) | empty(r,c) | (columnCompleted(c,[x|y]) & -belongsTo(r,[x|y]))) -> possibleBombsInRowTemp(r,c-1,[a|b],n)).

    %% Construction finished -> final fact is asserted
    all r a b n (possibleBombsInRowTemp(r,0,[a|b],n) -> possibleBombsInRow(r,[a|b],n)).

    % In columns

    %% We'll use the same logic and steps for the columns as we did for the rows.
    
    all c (columns(c) -> possibleBombsInColumnInit(c,[])).
    all c (possibleBombsInColumnInit(c,[]) & c>1 -> possibleBombsInColumnInit(c-1,[])).
    all r c (possibleBombsInColumnInit(c,[]) & rows(r) -> possibleBombsInColumnTemp(c,r-1,[r],1)).
    all r c z x y (possibleBombsInColumnInit(c,[]) & rows(r) & (sensorV(r,c,z) | sensorH(r,c,z) | empty(r,c) | (rowCompleted(r,[x|y]) & -belongsTo(c,[x|y]))) -> possibleBombsInColumnTemp(c,r-1,[],0)).
    all r c (possibleBombsInColumnTemp(c,r,[],0) & r>0 -> possibleBombsInColumnTemp(c,r-1,[r],1)).
    all r c z x y (possibleBombsInColumnTemp(c,r,[],0) & r>0 & (sensorV(r,c,z) | sensorH(r,c,z) | empty(r,c) | (rowCompleted(r,[x|y]) & -belongsTo(c,[x|y]))) -> possibleBombsInColumnTemp(c,r-1,[],0)).
    all r a b c n (possibleBombsInColumnTemp(c,r,[a|b],n) & r>0 -> possibleBombsInColumnTemp(c,r-1,[r,a|b],n+1)).
    all r a b c n z x y (possibleBombsInColumnTemp(c,r,[a|b],n) & r>0 & (sensorV(r,c,z) | sensorH(r,c,z) | empty(r,c) | (rowCompleted(r,[x|y]) & -belongsTo(c,[x|y]))) -> possibleBombsInColumnTemp(c,r-1,[a|b],n)).
    all c a b n (possibleBombsInColumnTemp(c,0,[a|b],n) -> possibleBombsInColumn(c,[a|b],n)).


    %%%%%%%%%%%%%%%%%%%%%%% Sensors that detect 0 bombs %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % Vertical - columns

    %% If there is a sensor detecting no bombs, we initiate the emptying of the column
    all x y r (rows(r) & sensorV(x,y,0) -> emptyColumn(y,r)).

    %% During the emptying of a column, every cell will be considered as empty, also the ones that contain sensors.
    %% As we use the term "empty" to infer "no bomb" (and not "no sensor"), this does not break or logic.
    all r c (emptyColumn(c,r) & r > 0 -> empty(r,c) & emptyColumn(c,r-1)).

    % Horizontal - rows

    %% We'll apply the same logic for the emptying of rows as we did for columns.
    all x y c (columns(c) & sensorH(x,y,0) -> emptyRow(x,c)).
    all r c (emptyRow(r,c) & c > 0 -> empty(r,c) & emptyRow(r,c-1)).

    %%%%%%%%%%%%%%%%%%%%%%% Sensors that detect the maximal amount of bombs %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % Vertical - columns

    %% We know that the lists possibleBombsInColumn(c,l,n) are constructed in such a way that the list of cells in which
    %% there will be bombs in the end, ALWAYS is a sublist of l (see explanations above). Therefore, we know that if
    %% there only are n possible bombs in the column c and there is a vertical sensor detecting exactly n bombs in this column,
    %% there has to be a bomb in every cell (x,c) of the possible x included in l.
    %% We want to remember in which cells there are bombs, so we can count them later.
    %% To do so, we will empty a temporary list in a filling step and as well keep the list of cells that started the filling.
    %%
    %% Example: fillColumn(4, [1,2,3],[1,2,3])
    %% 
    %% This fact represents the beginning of the filling of column c = 4. We'll put a bomb in (1,4), (2,4) and (3,4).
    %% During this filling, new facts will ber asserted, like for example fillColumn(4, [2,3],[1,2,3]).
    %% 
    %% The first list is the temporary list that will be emptied to know when the filling is finished.
    %% The second list is the list of cells in which there will be bombs in the column at the end of the solved game.
    %% We'll pass this list to the fact columnCompleted and this will help us a lot during the construction of possibleBombsInColumn
    %% for columns that are not solvable straight from the beginning (see explanations above).
    %%
    %% In the example case, we would assert the fact columnCompleted(4,[1,2,3]), because all the bombs that
    %% are in column 4 have been discovered and will be in the cells (1,4), (2,4) and (3,4).
    %%

    %% Start of the filling of the column
    all a b c r n (sensorV(r,c,n) & possibleBombsInColumn(c,[a|b],n) -> fillColumn(c,[a|b],[a|b])).

    %% Filling step for the column
    all a b c d e (fillColumn(c,[a|b],[d|e]) -> bomb(a,c) & fillColumn(c,b,[d|e])).

    %% When there are on more cells to fill in a column, we mark the column as completed.
    all a b c (fillColumn(c,[],[a|b]) -> columnCompleted(c,[a|b])).

    % Sensors that detect the maximal amount of bombs - Horizontal

    %% We'll apply the same logic to fill rows as we did for columns.
    all a b c r n (sensorH(r,c,n) & possibleBombsInRow(r,[a|b],n) -> fillRow(r,[a|b],[a|b])).
    all a b c d r (fillRow(r,[a|b],[c|d]) -> bomb(r,a) & fillRow(r,b,[c|d])).
    all a b r (fillRow(r,[],[a|b]) -> rowCompleted(r,[a|b])).

    % Count bombs

    %% We'd like to count the number of bombs in each row and column, so we know when a row/column is completed,
    %% i.e. when all the bombs that should be in the row/column have been discovered.

    %% Count bombs in rows

    all r (rows(r) -> bombsInRow(r,[],0)).
    all r (bombsInRow(r,[],0) & r > 1 -> bombsInRow(r-1,[],0)).
    all x y (bomb(x,y) & bombsInRow(x,[],0) -> bombsInRow(x,[y],1)).
    all x y a b n (bomb(x,y) & bombsInRow(x,[a|b],n) & -belongsTo(y,[a|b]) -> bombsInRow(x,[y,a|b],n+1)).

    %% Count bombs in columns

    all c (columns(c) -> bombsInColumn(c,[],0)).
    all c (bombsInColumn(c,[],0) & c>1 -> bombsInColumn(c-1,[],0)).
    all x y (bomb(x,y) & bombsInColumn(y,[],0) -> bombsInColumn(y,[x],1)).
    all x y a b n (bomb(x,y) & bombsInColumn(y,[a|b],n) & -belongsTo(x,[a|b]) -> bombsInColumn(y,[x,a|b],n+1)).

    %% If there are n bombs in a row/column and there is a sensorV/sensorH that detects n bombs in that row/column,
    %% then the row/column is completed.
    all r c z a b (sensorV(r,c,z) & bombsInColumn(c,[a|b],z) -> columnCompleted(c,[a|b])).
    all r c z a b (sensorH(r,c,z) & bombsInRow(r,[a|b],z) -> rowCompleted(r,[a|b])).
end_of_list.

formula_list(sos).
    % Initial situation.
    rows(5).
    columns(5).
    sensorV(3,2,0).
    sensorH(1,3,2).
    sensorV(4,3,3).
    sensorH(2,2,1).
    sensorV(5,5,2).
    sensorH(4,1,0).
    sensorV(1,1,2).
end_of_list.

formula_list(passive).
    % Everytime we find a bomb, we return it as an ANSWER datastructure.
    all x y (bomb(x,y) -> $ANS(bomb(x,y))).
end_of_list.
