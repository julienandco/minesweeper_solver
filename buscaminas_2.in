set(hyper_res).
assign(max_proofs,-1).

% Lenguaje del Problema
%
% Propiedades:
% - filas(x): Hay x filas en la cuadricúla
% - columnas(x): Hay x columnas en la cuadricúla
% - sensorH(x,y,z): En la casilla de coordenadas (x,y) hay un sensor H que detecta z bombas
% - sensorV(x,y,z): En la casilla de coordenadas (x,y) hay un sensor V que detecta z bombas
% - bomba(x,y): Hay una bomba en la casilla de coordenadas (x,y)
% - vacio(x,y): La casilla de coordenas (x,y) no contiene una bomba (pero tal vez un sensor).
%

make_evaluable(_>_, $GT(_,_)).
make_evaluable(_<_, $LT(_,_)).
make_evaluable(_<=_, $LE(_,_)).
make_evaluable(_+_, $SUM(_,_)).
make_evaluable(_-_, $DIFF(_,_)).

% TODO: WENN EIN SENSOR NUR PARTIELLEN CALL MACHT (1 DETECTED, 3 MÖGLICH) UND ES ERFÜLLT WIRD (1 BOMBE IRGENDWO)
% DANN MUSS DIE LISTE AUCH AKTUALISIERT WERDEN

formula_list(usable).
    % Listas iniciales de bombas posibles

    % En Filas
    all f (filas(f) -> bombasPosiblesEnFilaInit(f,[])).
    all f (bombasPosiblesEnFilaInit(f,[]) & f>1 -> bombasPosiblesEnFilaInit(f-1,[])).
    all f c (bombasPosiblesEnFilaInit(f,[]) & columnas(c) -> bombasPosiblesEnFilaTemp(f,c-1,[c],1)).
    all f c z (bombasPosiblesEnFilaInit(f,[]) & columnas(c) & (sensorV(f,c,z) | sensorH(f,c,z) | vacio(f,c)) -> bombasPosiblesEnFilaTemp(f,c-1,[],0)).
    all f c (bombasPosiblesEnFilaTemp(f,c,[],0) & c>0 -> bombasPosiblesEnFilaTemp(f,c-1,[c],1)).
    all f c a b n (bombasPosiblesEnFilaTemp(f,c,[a|b],n) & c>0 -> bombasPosiblesEnFilaTemp(f,c-1,[c,a|b],n+1)).
    all f a b c n z (bombasPosiblesEnFilaTemp(f,c,[a|b],n) & c>0 & (sensorV(f,c,z) | sensorH(f,c,z) | vacio(f,c)) -> bombasPosiblesEnFilaTemp(f,c-1,[a|b],n)).
    all f a b n (bombasPosiblesEnFilaTemp(f,0,[a|b],n) -> bombasPosiblesEnFila(f,[a|b],n)).

    % En Columnas
    all c (columnas(c) -> bombasPosiblesEnColumnaInit(c,[])).
    all c (bombasPosiblesEnColumnaInit(c,[]) & c>1 -> bombasPosiblesEnColumnaInit(c-1,[])).
    all f c (bombasPosiblesEnColumnaInit(c,[]) & filas(f) -> bombasPosiblesEnColumnaTemp(c,f-1,[f],1)).
    all f c z (bombasPosiblesEnColumnaInit(c,[]) & filas(f) & (sensorV(f,c,z) | sensorH(f,c,z) | vacio(f,c)) -> bombasPosiblesEnColumnaTemp(c,f-1,[],0)).
    all f c (bombasPosiblesEnColumnaTemp(c,f,[],0) & f>0 -> bombasPosiblesEnColumnaTemp(c,f-1,[f],1)).
    all f a b c n (bombasPosiblesEnColumnaTemp(c,f,[a|b],n) & f>0 -> bombasPosiblesEnColumnaTemp(c,f-1,[f,a|b],n+1)).
    all f a b c n z (bombasPosiblesEnColumnaTemp(c,f,[a|b],n) & f>0 & (sensorV(f,c,z) | sensorH(f,c,z) | vacio(f,c)) -> bombasPosiblesEnColumnaTemp(c,f-1,[a|b],n)).
    all c a b n (bombasPosiblesEnColumnaTemp(c,0,[a|b],n) -> bombasPosiblesEnColumna(c,[a|b],n)).

    % Sensores que no detectan nada - Vertical
    all x y f (filas(f) & sensorV(x,y,0) -> vaciarColumna(y,f)).
    all f c (vaciarColumna(c,f) & f > 0 -> vacio(f,c) & vaciarColumna(c,f-1)).

    % Sensores que no detectan nada - Horizontal
    all x y c (columnas(c) & sensorH(x,y,0) -> vaciarFila(x,c)).
    all f c (vaciarFila(f,c) & c > 0 -> vacio(f,c) & vaciarFila(f,c-1)).

    % Sensores que detectan todo - Vertical
    all a b c f n (sensorV(f,c,n) & bombasPosiblesEnColumna(c,[a|b],n) -> llenarColumna(c,[a|b])).
    all a b c (llenarColumna(c,[a|b]) -> bomba(a,c) & llenarColumna(c,b)).

    % Sensores que detectan todo - Horizontal
    all a b c f n (sensorH(f,c,n) & bombasPosiblesEnFila(f,[a|b],n) -> llenarFila(f,[a|b])).
    all a b f (llenarFila(f,[a|b]) -> bomba(f,a) & llenarFila(f,b)).
end_of_list.

formula_list(sos).
    % Situación inicial.
    filas(5).
    columnas(5).
    sensorV(3,2,0).
    sensorH(1,3,2).
    sensorV(4,3,3).
    sensorH(2,2,1).
    sensorV(5,5,2).
    sensorH(4,1,0).
    sensorV(1,1,2).
end_of_list.

formula_list(passive).
    % Cada vez que encontramos a una bomba, la devolvemos como respuesta.
    all x y (bomba(x,y) -> $ANS(bomba(x,y))).
end_of_list.
